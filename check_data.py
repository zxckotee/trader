#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º CSV —Ñ–∞–π–ª–∞–º.
"""

import sys
from pathlib import Path
import pandas as pd
from datetime import datetime

# Add src to path
sys.path.append(str(Path(__file__).parent / 'src'))

from src.data.bybit_parser import BybitParser


def analyze_data_directory(data_dir: str = "./data"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ CSV —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        data_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    data_path = Path(data_dir)
    
    if not data_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {data_path.absolute()}")
    print("=" * 80)
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ CSV —Ñ–∞–π–ª—ã
    csv_files = list(data_path.glob("*.csv"))
    
    if not csv_files:
        print("‚ùå CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(csv_files)} CSV —Ñ–∞–π–ª–æ–≤\n")
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    symbols_data = {}
    timeframes = set()
    
    for csv_file in csv_files:
        filename = csv_file.stem
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —Å–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
        parts = filename.split('_')
        if len(parts) >= 2:
            timeframe = parts[-1]
            symbol = '_'.join(parts[:-1])
            
            if symbol not in symbols_data:
                symbols_data[symbol] = {}
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
            try:
                df = pd.read_csv(csv_file)
                df['timestamp'] = pd.to_datetime(df['timestamp'])
                
                symbols_data[symbol][timeframe] = {
                    'records': len(df),
                    'start_date': df['timestamp'].min(),
                    'end_date': df['timestamp'].max(),
                    'file_size_mb': csv_file.stat().st_size / (1024 * 1024),
                    'price_range': (df['close'].min(), df['close'].max())
                }
                timeframes.add(timeframe)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {csv_file}: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    sorted_symbols = sorted(symbols_data.keys())
    sorted_timeframes = sorted(timeframes, key=lambda x: {
        '1m': 1, '3m': 2, '5m': 3, '15m': 4, '30m': 5, '1h': 6,
        '2h': 7, '4h': 8, '6h': 9, '12h': 10, '1d': 11, '1w': 12
    }.get(x, 999))
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    print("ü™ô –°–ò–ú–í–û–õ–´ –ò –î–ê–ù–ù–´–ï:")
    print("-" * 80)
    
    total_records = 0
    total_size_mb = 0
    
    for symbol in sorted_symbols:
        symbol_records = 0
        symbol_size = 0
        available_tf = []
        
        print(f"\nüìà {symbol}:")
        
        for tf in sorted_timeframes:
            if tf in symbols_data[symbol]:
                data = symbols_data[symbol][tf]
                symbol_records += data['records']
                symbol_size += data['file_size_mb']
                available_tf.append(tf)
                
                print(f"   {tf:>4}: {data['records']:>8,} –∑–∞–ø–∏—Å–µ–π | "
                      f"{data['start_date'].strftime('%Y-%m-%d')} ‚Üí {data['end_date'].strftime('%Y-%m-%d')} | "
                      f"{data['file_size_mb']:>6.1f} MB | "
                      f"${data['price_range'][0]:>8.2f} - ${data['price_range'][1]:>8.2f}")
        
        print(f"   {'–ò–¢–û–ì–û':>4}: {symbol_records:>8,} –∑–∞–ø–∏—Å–µ–π | "
              f"{len(available_tf)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ | {symbol_size:>6.1f} MB")
        
        total_records += symbol_records
        total_size_mb += symbol_size
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°–∏–º–≤–æ–ª–æ–≤: {len(sorted_symbols)}")
    print(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: {len(sorted_timeframes)} ({', '.join(sorted_timeframes)})")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size_mb:.1f} MB")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {total_size_mb/len(csv_files):.1f} MB")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø:")
    print("-" * 80)
    
    # –°–∏–º–≤–æ–ª—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
    symbol_totals = [(symbol, sum(data['records'] for data in symbols_data[symbol].values())) 
                     for symbol in sorted_symbols]
    symbol_totals.sort(key=lambda x: x[1], reverse=True)
    
    print("üìà –¢–æ–ø —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–∞–Ω–Ω—ã—Ö:")
    for i, (symbol, records) in enumerate(symbol_totals[:10], 1):
        timeframes_count = len(symbols_data[symbol])
        print(f"   {i:2d}. {symbol:<12}: {records:>8,} –∑–∞–ø–∏—Å–µ–π ({timeframes_count} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤)")
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    print(f"\nüöÄ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø:")
    
    # –í—Å–µ —Å–∏–º–≤–æ–ª—ã
    all_symbols_str = ' '.join(sorted_symbols)
    print(f"\n# –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –í–°–ï–• —Å–∏–º–≤–æ–ª–∞—Ö:")
    print(f"python train.py --auto-symbols --epochs 50 --force-cpu")
    
    # –¢–æ–ø —Å–∏–º–≤–æ–ª—ã
    top_symbols = [symbol for symbol, _ in symbol_totals[:10]]
    top_symbols_str = ' '.join(top_symbols)
    print(f"\n# –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø-10 —Å–∏–º–≤–æ–ª–∞—Ö:")
    print(f"python train.py --symbols {top_symbols_str} --epochs 50")
    
    # –¢–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    daily_symbols = [symbol for symbol in sorted_symbols if '1d' in symbols_data[symbol]]
    if daily_symbols:
        print(f"\n# –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"python train.py --auto-symbols --timeframes 1d --epochs 30 --force-cpu")
    
    return symbols_data


def main():
    """Main function."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Check available cryptocurrency data')
    parser.add_argument('--data-dir', type=str, default='./data',
                       help='Data directory to analyze')
    
    args = parser.parse_args()
    
    analyze_data_directory(args.data_dir)


if __name__ == "__main__":
    main()
