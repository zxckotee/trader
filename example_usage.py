#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MoE –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö -> –æ–±—É—á–µ–Ω–∏–µ -> –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.
"""

import sys
from pathlib import Path
import time

# Add src to path
sys.path.append(str(Path(__file__).parent / 'src'))

from src.data.bybit_parser import BybitParser
from src.data.preprocessor import CryptoDataPreprocessor
from src.models.moe_model import MoECryptoPredictor
from src.utils.config import load_config


def demo_data_collection():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
    parser = BybitParser(data_dir="./demo_data")
    
    # –°–±–æ—Ä –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ
    symbol = "BTCUSDT"
    timeframes = ['5m', '1h']  # –¢–æ–ª—å–∫–æ 2 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
    start_date = "2024-01-01"
    
    print(f"–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å {start_date}...")
    
    try:
        data = parser.collect_multi_timeframe_data(
            symbol=symbol,
            timeframes=timeframes,
            start_date=start_date
        )
        
        if data:
            print("‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã:")
            for tf, df in data.items():
                print(f"  {tf}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            return data
        else:
            print("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def demo_preprocessing(data_dict):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ===")
    
    if not data_dict:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    preprocessor = CryptoDataPreprocessor(
        sequence_length=50,  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –¥–µ–º–æ
        scaler_type='standard'
    )
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        processed_data = preprocessor.process_multi_timeframe_data(
            data_dict, fit_scalers=True
        )
        
        print("‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:")
        for tf, data in processed_data.items():
            print(f"  {tf}: {data['X'].shape[0]} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π, "
                  f"—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {data['X'].shape[2]}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–µ–π–ª–µ—Ä–æ–≤
        preprocessor.save_scalers("./demo_data/demo_scalers.pkl")
        
        return processed_data, preprocessor
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return None, None


def demo_model_creation(input_dim, timeframes):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è MoE –º–æ–¥–µ–ª–∏ ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –¥–ª—è –¥–µ–º–æ
        model = MoECryptoPredictor(
            input_dim=input_dim,
            timeframes=timeframes,
            expert_config={
                'hidden_dim': 128,  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
                'num_layers': 2,    # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
                'num_heads': 4,     # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –¥–µ–º–æ
                'dropout': 0.1
            },
            use_gating=True
        )
        
        total_params = sum(p.numel() for p in model.parameters())
        trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        
        print(f"‚úì –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")
        print(f"  –û–±—É—á–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {trainable_params:,}")
        print(f"  –≠–∫—Å–ø–µ—Ä—Ç–æ–≤: {len(timeframes)}")
        
        return model
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None


def demo_inference(model, processed_data, preprocessor):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏."""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ ===")
    
    if not model or not processed_data:
        print("–ù–µ—Ç –º–æ–¥–µ–ª–∏ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
        return
    
    try:
        import torch
        
        model.eval()
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        inputs = {}
        for tf, data in processed_data.items():
            if data['X'].shape[0] > 0:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º batch dimension
                last_sequence = torch.FloatTensor(data['X'][-1:])
                inputs[tf] = last_sequence
        
        if inputs:
            print(f"–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è {len(inputs)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
            
            # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
            with torch.no_grad():
                outputs = model(inputs)
            
            print("‚úì –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if 'price_change' in outputs:
                price_change_pct = float(outputs['price_change'].item() * 100)
                print(f"  –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_pct:+.2f}%")
            
            if 'direction_logits' in outputs:
                direction_probs = torch.softmax(outputs['direction_logits'], dim=-1)
                direction = '–í–í–ï–†–•' if torch.argmax(direction_probs).item() == 1 else '–í–ù–ò–ó'
                confidence = float(torch.max(direction_probs).item())
                print(f"  –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            
            if 'volatility' in outputs:
                volatility = float(outputs['volatility'].item())
                print(f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.4f}")
            
            # –í–µ—Å–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            if 'expert_weights' in outputs and outputs['expert_weights'] is not None:
                expert_weights = outputs['expert_weights'].cpu().numpy()[0]
                print("  –í–µ—Å–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:")
                for i, (tf, weight) in enumerate(zip(inputs.keys(), expert_weights)):
                    print(f"    {tf}: {weight:.3f}")
        
        else:
            print("–ù–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ: {e}")


def demo_full_pipeline():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MoE –º–æ–¥–µ–ª–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞")
    print("=" * 70)
    
    start_time = time.time()
    
    # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    data_dict = demo_data_collection()
    
    if not data_dict:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ.")
        return
    
    # 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    processed_data, preprocessor = demo_preprocessing(data_dict)
    
    if not processed_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ.")
        return
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    input_dim = next(iter(processed_data.values()))['X'].shape[2]
    timeframes = list(processed_data.keys())
    
    model = demo_model_creation(input_dim, timeframes)
    
    if not model:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ.")
        return
    
    # 4. –ò–Ω—Ñ–µ—Ä–µ–Ω—Å (–±–µ–∑ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ)
    demo_inference(model, processed_data, preprocessor)
    
    # –ò—Ç–æ–≥–∏
    elapsed_time = time.time() - start_time
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
    print("\n–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("1. –°–æ–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö: python collect_data.py")
    print("2. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python train.py")
    print("3. –î–µ–ª–∞–π—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: python predict.py")


def demo_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏")
    print("=" * 40)
    
    try:
        import torch
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        batch_size = 2
        seq_len = 50
        input_dim = 30
        timeframes = ['5m', '1h']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = MoECryptoPredictor(
            input_dim=input_dim,
            timeframes=timeframes,
            expert_config={'hidden_dim': 64, 'num_layers': 2, 'num_heads': 4},
            use_gating=True
        )
        
        # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        inputs = {}
        for tf in timeframes:
            inputs[tf] = torch.randn(batch_size, seq_len, input_dim)
        
        # –ü—Ä—è–º–æ–π –ø—Ä–æ—Ö–æ–¥
        model.eval()
        with torch.no_grad():
            outputs = model(inputs)
        
        print("‚úì –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        print(f"  –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {batch_size} –±–∞—Ç—á–∞, {seq_len} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤, {input_dim} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"  –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for key, value in outputs.items():
            if isinstance(value, torch.Tensor):
                print(f"    {key}: {value.shape}")
        
        print(f"  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏: {sum(p.numel() for p in model.parameters()):,}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ç–µ—Å—Ç–µ: {e}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MoE –º–æ–¥–µ–ª–∏')
    parser.add_argument('--quick', action='store_true', 
                       help='–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–µ–∑ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    if args.quick:
        demo_quick_test()
    else:
        demo_full_pipeline()
